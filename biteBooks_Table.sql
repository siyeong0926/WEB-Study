use sys;

create database bitebooks;

use bitebooks;

CREATE TABLE MEMBER (
M_ID INT NOT NULL AUTO_INCREMENT,
M_EMAIL VARCHAR(30) NOT NULL,
M_PW VARCHAR(20) NOT NULL,
M_NAME VARCHAR(10) NOT NULL,
M_NICKNAME VARCHAR(15) NOT NULL,
M_BIRTH DATE NOT NULL,
M_SIGNUP DATETIME DEFAULT CURRENT_TIMESTAMP,
M_ADMIN INT DEFAULT 0,
M_PHONE VARCHAR(20) NOT NULL,
SALT CHAR(64) NOT NULL,
PRIMARY KEY (M_ID)
);

CREATE TABLE NOTICE (
N_NO		INT	NOT NULL AUTO_INCREMENT,
M_ID		INT	NOT NULL,
N_TITLE		VARCHAR(100) NOT NULL,
N_CONTENT	TEXT	NOT NULL,
N_CDATE		DATETIME DEFAULT CURRENT_TIMESTAMP,
N_UDATE		DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
N_GUBUN		INT	NOT NULL,
PRIMARY KEY (N_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID)
);

CREATE TABLE QNA (
Q_NO INT NOT NULL AUTO_INCREMENT,
M_ID INT NOT NULL,
Q_TITLE VARCHAR(30) NOT NULL,
Q_CONTENT TEXT NOT NULL,
Q_CDATE DATETIME DEFAULT CURRENT_TIMESTAMP,
Q_UDATE DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
Q_CATEGORY VARCHAR(30) NOT NULL,
Q_STATE VARCHAR(30),
PRIMARY KEY (Q_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID)
);

CREATE TABLE QCOMMENT (
QC_NO	INT	NOT NULL AUTO_INCREMENT,
Q_NO	INT	NOT NULL,
M_ID	INT	NOT NULL,
QC_CONTENT	TEXT NOT NULL,
QC_CDATE	DATETIME DEFAULT CURRENT_TIMESTAMP,
QC_UDATE	DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
PRIMARY KEY (QC_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID),
FOREIGN KEY (Q_NO) REFERENCES QNA(Q_NO)
);

CREATE TABLE BOOK (
B_NO INT NOT NULL AUTO_INCREMENT,
B_TITLE VARCHAR(20) NOT NULL,
B_AUTHOR VARCHAR(20) NOT NULL,
B_PUBLISHER VARCHAR(20) NOT NULL,
B_DATE DATE NOT NULL,
B_THUMBNAIL VARCHAR(100) NOT NULL,
B_DESCRIPT VARCHAR(400) NOT NULL,
B_GENRE VARCHAR(20) NOT NULL,
B_TYPE VARCHAR(10) NOT NULL,
PRIMARY KEY (B_NO)
);

CREATE TABLE EPISODE (
B_NO INT NOT NULL,
EP_NO INT NOT NULL AUTO_INCREMENT,
EP_TITLE VARCHAR(20) NOT NULL,
EP_CDATE DATETIME DEFAULT CURRENT_TIMESTAMP,
EP_UDATE DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
EP_VIEW INT DEFAULT 0,
EP_RPRICE INT NOT NULL,
EP_CPRICE INT NOT NULL,
EP_CONTENT VARCHAR(100) NOT NULL,
PRIMARY KEY (EP_NO),
FOREIGN KEY (B_NO) REFERENCES BOOK(B_NO)
);

CREATE TABLE CART (
C_NO INT NOT NULL AUTO_INCREMENT,
M_ID INT NOT NULL,
EP_NO INT NOT NULL,
B_NO INT NOT NULL,
C_TYPE VARCHAR(10) NOT NULL,
PRIMARY KEY (C_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID),
FOREIGN KEY (B_NO) REFERENCES BOOK(B_NO),
FOREIGN KEY (EP_NO) REFERENCES EPISODE(EP_NO) 
);

CREATE TABLE `LIKE` (
L_NO INT NOT NULL AUTO_INCREMENT,
M_ID INT NOT NULL,
B_NO INT NOT NULL,
PRIMARY KEY (L_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID),
FOREIGN KEY (B_NO) REFERENCES BOOK(B_NO)
);

CREATE TABLE `ORDER` (
M_ID INT NOT NULL,
EP_NO INT NOT NULL,
B_NO INT NOT NULL,
O_NO INT NOT NULL AUTO_INCREMENT,
O_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
O_COUNT INT DEFAULT 0,
PRIMARY KEY (O_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID),
FOREIGN KEY (EP_NO) REFERENCES EPISODE(EP_NO),
FOREIGN KEY (B_NO) REFERENCES BOOK(B_NO)
);

CREATE TABLE PAYMENT (
P_NO	INT	NOT NULL AUTO_INCREMENT,
O_NO	INT	NOT NULL,
M_ID	INT	NOT NULL,
EP_NO	INT	NOT NULL,
B_NO	INT	NOT NULL,
P_PRICE	INT	NOT NULL,
P_TYPE VARCHAR(30) NOT NULL,
P_DATE	DATETIME DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (P_NO),
FOREIGN KEY (O_NO) REFERENCES `ORDER`(O_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID),
FOREIGN KEY (EP_NO) REFERENCES EPISODE(EP_NO),
FOREIGN KEY (B_NO) REFERENCES BOOK(B_NO)
);

CREATE TABLE ECOMMENT (
EC_NO	INT	NOT NULL AUTO_INCREMENT,
O_NO	INT	NOT NULL,
M_ID	INT	NOT NULL,
EP_NO	INT	NOT NULL,
B_NO	INT	NOT NULL,
EC_CONTENT	TEXT	NOT NULL,
EC_CDATE	DATETIME DEFAULT CURRENT_TIMESTAMP,
EC_UDATE	DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
EC_POINT	INT DEFAULT 3,
PRIMARY KEY (EC_NO),
FOREIGN KEY (O_NO) REFERENCES `ORDER`(O_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID),
FOREIGN KEY (EP_NO) REFERENCES EPISODE(EP_NO),
FOREIGN KEY (B_NO) REFERENCES BOOK(B_NO)
);

CREATE TABLE RENTAL (
R_NO	INT	NOT NULL AUTO_INCREMENT,
P_NO	INT	NOT NULL,
O_NO	INT	NOT NULL,
M_ID	INT	NOT NULL,
EP_NO	INT	NOT NULL,
B_NO	INT	NOT NULL,
R_SDATE	DATETIME DEFAULT CURRENT_TIMESTAMP,
R_EDATE	DATETIME, 
PRIMARY KEY (R_NO),
FOREIGN KEY (O_NO) REFERENCES `ORDER`(O_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID),
FOREIGN KEY (EP_NO) REFERENCES EPISODE(EP_NO),
FOREIGN KEY (B_NO) REFERENCES BOOK(B_NO),
FOREIGN KEY (P_NO) REFERENCES PAYMENT(P_NO)
);

CREATE TABLE COLLECT (
COL_NO	INT	NOT NULL AUTO_INCREMENT,
P_NO	INT	NOT NULL,
O_NO	INT	NOT NULL,
M_ID	INT	NOT NULL,
EP_NO	INT	NOT NULL,
B_NO	INT	NOT NULL,
COL_SDATE	DATETIME DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (COL_NO),
FOREIGN KEY (O_NO) REFERENCES `ORDER`(O_NO),
FOREIGN KEY (M_ID) REFERENCES MEMBER(M_ID),
FOREIGN KEY (EP_NO) REFERENCES EPISODE(EP_NO),
FOREIGN KEY (B_NO) REFERENCES BOOK(B_NO),
FOREIGN KEY (P_NO) REFERENCES PAYMENT(P_NO)
);

-- QNA 답변 완료되면(QCOMMENT INSERT) QNA테이블 Q_STATE 자동으로 UPDATE하는 트리거

DELIMITER //
CREATE TRIGGER Q_STATE_TRIGGER 
AFTER INSERT ON QCOMMENT
FOR EACH ROW 
BEGIN 
    UPDATE QNA 
    SET Q_STATE = '답변완료' 
    WHERE Q_NO = NEW.Q_NO; 
END; //
DELIMITER ;

-- 결제완료가 되면(PAMENT INSERT) RENTAL 테이블에 종료일(결제일+3일) 자동 UPDATE되는 트리거

DELIMITER //
CREATE TRIGGER R_EDATE_TRIGGER
AFTER INSERT ON PAYMENT
FOR EACH ROW
BEGIN
    UPDATE RENTAL
    SET R_EDATE = DATE_ADD(CURRENT_TIMESTAMP, INTERVAL 3 DAY)
    WHERE P_NO = NEW.P_NO;
END; //
DELIMITER ;
